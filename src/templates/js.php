/**
 * This file generated by PropelJS: https://github.com/AthensFramework/PropelJS<?php
    if (sizeof($tableColumns > 0) && sizeof(array_values($tableColumns)[0] >= 2)) {
        $exampleTableName = array_keys($tableColumns)[0];
        $examplePluralTableName = $tablePlurals[$exampleTableName];
        $examplePhpTableName = $tablePhpNames[$exampleTableName];
        $exampleAttributeName = array_keys($tableColumns[$exampleTableName])[1];

    ?>

 *
 * Example use:
 * ```
 * var db = <?php echo $databaseName; ?>.propelJS({baseAddress:'/api/'});
 *
 * db.<?php echo $examplePluralTableName; ?>(2)
 *      .get()
 *      .then(
 *          function(<?php echo $exampleTableName; ?>) {
 *              <?php echo $exampleTableName; ?>.set<?php echo $exampleAttributeName; ?>('example-value').save();
 *          }
 *      );
 *
 * myNew<?php echo $examplePhpTableName; ?> = db.<?php echo $examplePluralTableName; ?>();
 * myNew<?php echo $examplePhpTableName; ?>.set<?php echo $exampleAttributeName; ?>('example-value')
 *      .save()
 *      .then(
 *          function(<?php echo $exampleTableName; ?>) {
 *              console.log(<?php echo $exampleTableName; ?>.getId());
 *          }
 *      );
 * ```
 *
 * Of course, this auto-generated example may not work correctly if your model
 * includes additional required fields, etc.
<?php } ?>
 *
 * See the documentation at https://github.com/AthensFramework/PropelJS
 *
 * Do not edit this file; any changes will be overwritten the next time
 * you run `propel model:build`.
 */

var <?php echo $databaseName; ?> = {};

<?php echo $databaseName; ?>.propelJS = (function() {

    var baseAddress = '';
    var headers = {};

    var doAJAX = function(method, relativeAddress, data) {

        return $.ajax(
            {
                method: method,
                url: baseAddress + relativeAddress,
                data: JSON.stringify(data),
                processData: false,
                dataType: 'json',
                beforeSend: function(jqXHR) {
                    for (var header in headers) {
                        if (headers.hasOwnProperty(header)) {
                            jqXHR.setRequestHeader(header, headers[header]);
                        }
                    }
                }
            }
        );
    };
    <?php foreach ($tableColumns as $tableName => $columns) { ?>

    var <?php echo $tablePhpNames[$tableName]; ?> = function(id) {

        var attributes = {'Id': id};

        /**
         * Internal method for getting an instance attribute.
         *
         * @param attributeName
         * @returns {*}
         */
        var getAttribute = function(attributeName)
        {
            return attributes.hasOwnProperty(attributeName) ? attributes[attributeName] : undefined;
        };

        /**
         * Internal method for setting an instance attribute.
         *
         * @param attributeName
         * @param attributeValue
         */
        var setAttribute = function(attributeName, attributeValue)
        {
            attributes[attributeName] = attributeValue;
        };

        /**
         * Get the Id attribute for this <?php echo $tableName; ?>.
         *
         * @returns {*}
         */
        var getId = function()
        {
            return getAttribute('Id');
        };<?php echo "\n"; foreach ($columns as $columnName => $columnType) { if ($columnName !== 'Id') { ?>

        /**
         * Set the <?php echo $columnName; ?> attribute for this <?php echo $tableName; ?>.
         *
         * @param new<?php echo $columnName; ?>

         */
        var set<?php echo $columnName; ?> = function(new<?php echo $columnName; ?>)
        {
            setAttribute('<?php echo $columnName; ?>', new<?php echo $columnName; ?>);

            return this;
        };

        /**
         * Get the <?php echo $columnName; ?> for this <?php echo $tableName; ?>.
         *
         * @returns {*}
         */
        var get<?php echo $columnName; ?> = function()
        {
            return getAttribute('<?php echo $columnName; ?>');
        };
    <?php }} ?>

        /**
         * Perform the delete action for this <?php echo $tableName; ?>.
         *
         * @returns {*}
         */
        var remove = function()
        {
            return doAJAX(
                'DELETE',
                '<?php echo $tablePlurals[$tableName]; ?>/' + getId()
            ).then(function(result) {attributes = {}; return undefined;})
        };

        /**
         * Perform the retrieve action for this <?php echo $tableName; ?>.
         *
         * @returns {*}
         */
        var get = function()
        {
            var <?php echo $tableName; ?> = this;

            return doAJAX(
                'GET',
                '<?php echo $tablePlurals[$tableName]; ?>/' + getId()
            ).then(function(result) {attributes = result; return <?php echo $tableName; ?>;})
        };

        /**
        * Retrieve <?php echo $tablePlurals[$tableName]; ?> with attributes matching the current <?php echo $tableName; ?>.
        *
        * @returns {*}
        */
        var find = function()
        {
            var <?php echo $tableName; ?> = this;
    
            return doAJAX(
                'GET',
                '<?php echo $tablePlurals[$tableName]; ?>/?' + $.param(attributes)
            ).then(function(result) {attributes = result; return <?php echo $tableName; ?>;})
        };

        /**
         * Perform the update or the create action for this <?php echo $tableName; ?>.
         * 
         * @returns {*}
         */
        var save = function()
        {
            var <?php echo $tableName; ?> = this;

            var ajax;

            if (typeof getId() === 'undefined') {
                ajax = doAJAX(
                    'POST',
                    '<?php echo $tablePlurals[$tableName]; ?>/',
                    attributes
                )
            } else {
                ajax = doAJAX(
                    'PUT',
                    '<?php echo $tablePlurals[$tableName]; ?>/' + getId(),
                    attributes
                )
            }

            return ajax.then(function(result) {attributes = result; return <?php echo $tableName; ?>;})
        };

        return {
            'get': get,
            'find': find,
            'delete': remove,
            'save': save,
            'getId': getId,<?php echo "\n"; foreach ($columns as $columnName => $columnType) { if ($columnName !== 'Id') { ?><?php echo "'get$columnName': get$columnName,\n"; ?>
            <?php echo "'set$columnName': set$columnName,\n"; } ?>
            <?php } ?>

        }
    };
    <?php } ?>
    
    return function(data) {
        baseAddress = data.baseAddress;
        headers = data.headers;

        return {
            <?php foreach ($tablePlurals as $tableName => $pluralName) { ?>'<?php echo $pluralName; ?>': <?php echo $tablePhpNames[$tableName] ?>,
            <?php } ?>

        }
    };

})();
